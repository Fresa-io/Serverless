#!/bin/bash

# Enhanced Entrypoint script for Lambda deployment with alias management
# DEV environment is local-only, no deployment needed

# Function to show usage
show_usage() {
    echo "🚀 Enhanced Lambda Deployment Container"
    echo ""
    echo "Usage:"
    echo "  docker run --rm -it app deploy <encrypted_credentials>"
    echo ""
    echo "This will start the interactive deployment menu where you can:"
    echo "  • Test functions locally"
    echo "  • Run unit tests"
    echo "  • Deploy to STAGING/PROD"
    echo "  • Check deployment status"
    echo "  • And much more!"
    echo ""
    echo "Example:"
    echo "  docker run --rm -it app deploy YOUR_BASE64_ENCODED_CREDENTIALS"
    echo ""
    echo "Advanced Commands (for power users):"
    echo "  docker run --rm app hash <access_key> <secret_key> <region>"
    echo "  docker run --rm app setup-aliases <encrypted_credentials>"
    echo "  docker run --rm app promote <encrypted_credentials> <function> <source_env> <target_env>"
    echo "  docker run --rm app status <encrypted_credentials>"
    echo "  docker run --rm app test-local <function>"
    echo "  docker run --rm app test-unit <function>"
    echo "  docker run --rm app list-events [function]"
    echo "  docker run --rm -it app shell <encrypted_credentials>"
    echo ""
    echo "Environments: STAGING, PROD"
         echo "Functions: $(python3 utils/function_discovery.py list | tr '\n' ', ' | sed 's/,$//')"
    echo ""
    echo "💻 Note: DEV environment is local-only, no deployment needed"
    echo "🔐 Security: Credentials are encrypted using base64 encoding for sharing"
}

# Function to setup AWS credentials
setup_aws_credentials() {
    local encrypted_creds="$1"
    
    echo "🔓 Decrypting credentials..."
    DECRYPTED_OUTPUT=$(python3 utils/encrypt_utils.py decrypt "$encrypted_creds" 2>&1)
    
    if echo "$DECRYPTED_OUTPUT" | grep -q "Error:"; then
        echo "❌ $DECRYPTED_OUTPUT"
        echo ""
        echo "💡 Troubleshooting:"
        echo "1. Make sure you're using the exact hash generated by the 'hash' command"
        echo "2. Check that the hash hasn't been modified or truncated"
        echo "3. Try generating a new hash with: docker run --rm app hash <access_key> <secret_key> <region>"
        return 1
    fi
    
    # Extract credentials from Python output
    ACCESS_KEY=$(echo "$DECRYPTED_OUTPUT" | grep "Access Key:" | cut -d' ' -f3)
    SECRET_KEY=$(echo "$DECRYPTED_OUTPUT" | grep "Secret Key:" | cut -d' ' -f3)
    REGION=$(echo "$DECRYPTED_OUTPUT" | grep "Region:" | cut -d' ' -f2)
    
    if [ -z "$ACCESS_KEY" ] || [ -z "$SECRET_KEY" ] || [ -z "$REGION" ]; then
        echo "❌ Error: Failed to extract credentials from decryption output"
        echo "Debug output: $DECRYPTED_OUTPUT"
        return 1
    fi
    
    echo "✅ Credentials decrypted successfully"
    echo "🌍 Region: $REGION"
    
    # Configure AWS CLI
    echo "⚙️  Configuring AWS CLI..."
    aws configure set aws_access_key_id "$ACCESS_KEY"
    aws configure set aws_secret_access_key "$SECRET_KEY"
    aws configure set region "$REGION"
    aws configure set output json
    
    # Test AWS connection
    echo "🔍 Testing AWS connection..."
    if aws sts get-caller-identity > /dev/null 2>&1; then
        echo "✅ AWS connection successful"
        IDENTITY=$(aws sts get-caller-identity --query 'Arn' --output text)
        echo "👤 Identity: $IDENTITY"
        return 0
    else
        echo "❌ AWS connection failed. Please check your credentials."
        return 1
    fi
}

# Function to show interactive menu
show_interactive_menu() {
    local encrypted_creds="$1"
    
    echo ""
    echo "🚀 Lambda Deployment Interactive Menu"
    echo "====================================="
    echo ""
    echo "Available Actions:"
    echo "  1) 🔍 Show Deployment Status"
    echo "  2) 🧪 Test Function Locally"
    echo "  3) 🧪 Run Unit Tests"
    echo "  4) 📋 List Test Events"
    echo "  5) 🆕 Create New Lambda Function"
    echo "  6) 💻 Interactive Shell"
    echo "  7) ❌ Exit"
    echo ""
    echo "🚀 Deployment: All deployments happen via GitHub Actions CI/CD"
    echo "📋 Note: Use 'menu' command in shell to return to this menu"
    echo ""
}

# Function to show function selection menu
show_function_menu() {
    echo ""
    echo "📋 Available Functions:"
    
         # Dynamically discover functions
     mapfile -t functions < <(python3 utils/function_discovery.py list)
     
     # If no functions found, show message
     if [ ${#functions[@]} -eq 0 ]; then
         echo "  No Lambda functions found"
         echo "  Use option 10 to add a new function"
         return
     fi
    
    # Display functions
    for i in "${!functions[@]}"; do
        echo "  $((i+1))) ${functions[i]}"
    done
    
    echo "  $(( ${#functions[@]} + 1 ))) All Functions"
    echo "  $(( ${#functions[@]} + 2 ))) 🔙 Back to Main Menu"
    echo ""
}

# Function to get function selection
get_function_selection() {
    show_function_menu
    
         # Get functions array using dynamic discovery
     mapfile -t functions < <(python3 utils/function_discovery.py list)
     
     # If no functions found, return
     if [ ${#functions[@]} -eq 0 ]; then
         echo "back"
         return
     fi
    
    max_choice=$(( ${#functions[@]} + 2 ))
    echo "Select function (1-$max_choice): "
    read -r choice
    
    # Validate choice
    if [[ ! "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt "$max_choice" ]; then
        echo "invalid"
        return
    fi
    
    # Handle selection
    if [ "$choice" -eq $(( ${#functions[@]} + 1 )) ]; then
        echo "all"
    elif [ "$choice" -eq $(( ${#functions[@]} + 2 )) ]; then
        echo "back"
    else
        # Return the selected function name (choice is 1-indexed)
        echo "${functions[$((choice-1))]}"
    fi
}

# Function to handle interactive menu
handle_interactive_menu() {
    local encrypted_creds="$1"
    
    # Setup AWS credentials first
    if ! setup_aws_credentials "$encrypted_creds"; then
        echo "❌ Failed to setup AWS credentials. Exiting."
        exit 1
    fi
    
    while true; do
        show_interactive_menu "$encrypted_creds"
        echo "Enter your choice (1-7): "
        read -r choice
        
        case $choice in
            1)  # Show Deployment Status
                echo "📊 Showing deployment status..."
                python3 scripts/deploy_with_aliases.py status
                ;;
            2)  # Test Function Locally
                while true; do
                    function=$(get_function_selection)
                    if [ "$function" = "back" ]; then
                        break
                    elif [ "$function" = "invalid" ]; then
                        echo "❌ Invalid selection"
                        continue
                    fi
                    
                    if [ "$function" = "all" ]; then
                        echo "🧪 Testing all functions locally..."
                                                 # Get all functions dynamically
                         while IFS= read -r func_name; do
                             echo "🧪 Testing $func_name..."
                             python3 scripts/local_test.py test "$func_name"
                             echo ""
                         done < <(python3 utils/function_discovery.py list)
                    else
                        echo "🧪 Testing $function locally..."
                        python3 scripts/local_test.py test "$function"
                    fi
                    break
                done
                ;;
            3)  # Run Unit Tests
                while true; do
                    function=$(get_function_selection)
                    if [ "$function" = "back" ]; then
                        break
                    elif [ "$function" = "invalid" ]; then
                        echo "❌ Invalid selection"
                        continue
                    fi
                    
                    if [ "$function" = "all" ]; then
                        echo "🧪 Running unit tests for all functions..."
                                                 # Get all functions dynamically
                         while IFS= read -r func_name; do
                             echo "🧪 Running unit tests for $func_name..."
                             python3 scripts/local_test.py test-unit "$func_name"
                             echo ""
                         done < <(python3 utils/function_discovery.py list)
                    else
                        echo "🧪 Running unit tests for $function..."
                        python3 scripts/local_test.py test-unit "$function"
                    fi
                    break
                done
                ;;
            4)  # List Test Events
                while true; do
                    function=$(get_function_selection)
                    if [ "$function" = "back" ]; then
                        break
                    elif [ "$function" = "invalid" ]; then
                        echo "❌ Invalid selection"
                        continue
                    fi
                    
                    if [ "$function" = "all" ]; then
                        echo "📋 Listing all test events..."
                        python3 scripts/local_test.py list-events
                    else
                        echo "📋 Listing test events for $function..."
                        python3 scripts/local_test.py list-events "$function"
                    fi
                    break
                done
                ;;
            5)  # Create New Lambda Function
                echo ""
                echo "🆕 Create New Lambda Function"
                echo "============================="
                echo ""
                echo "This will create a new Lambda function with:"
                echo "✅ Function code template"
                echo "✅ Unit tests template"
                echo "✅ Test events template"
                echo "✅ Updated configuration files"
                echo "✅ Updated GitHub Actions workflow"
                echo "✅ Updated interactive menu"
                echo "📋 Function naming rules:"
                echo "• Use camelCase or snake_case: myFunction or my_function"
                echo "• Examples: userLogin, processPayment, sendEmail"
                echo ""
                echo "Enter function name (or 'back' to cancel): "
                read -r function_name
                
                if [ "$function_name" = "back" ]; then
                    echo "❌ Cancelled function creation"
                elif [ -z "$function_name" ]; then
                    echo "❌ Function name cannot be empty"
                elif [[ ! "$function_name" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
                    echo "❌ Function name must be a valid identifier (letters, numbers, underscores)"
                else
                    echo ""
                    echo "📁 Select function category:"
                    echo "  1) Authentication (login, signup, auth)"
                    echo "  2) Processing (data processing, file handling)"
                    echo "  3) Communication (email, SMS, notifications)"
                    echo "  4) Analytics (reporting, data analysis)"
                    echo "  5) General (default category)"
                    echo "  6) Custom (enter your own category)"
                    echo ""
                    echo "Enter category choice (1-6): "
                    read -r category_choice
                    
                    case $category_choice in
                        1) category="Authentication" ;;
                        2) category="Processing" ;;
                        3) category="Communication" ;;
                        4) category="Analytics" ;;
                        5) category="General" ;;
                        6) 
                            echo "Enter custom category name: "
                            read -r category
                            if [ -z "$category" ]; then
                                category="General"
                            fi
                            ;;
                        *) 
                            echo "❌ Invalid choice. Using 'General' category."
                            category="General"
                            ;;
                    esac
                    
                    echo ""
                    echo "🚀 Creating new Lambda function: $function_name"
                    echo "📁 Category: $category"
                    echo "================================================"
                    
                    # Check if function already exists in any category
                    if find Lambdas/ -type d -name "$function_name" | grep -q .; then
                        echo "❌ Function '$function_name' already exists!"
                        echo "Please choose a different name."
                    else
                        # Run the add_lambda_function.py script with category
                        if python3 scripts/add_lambda_function.py "$function_name" "$category"; then
                            echo ""
                            echo "🎉 Successfully created Lambda function: $function_name"
                            echo ""
                            echo "📋 Next steps:"
                            echo "1. Edit the function code: Lambdas/$category/$function_name/$function_name.py"
                            echo "2. Add your business logic"
                            echo "3. Test locally: Select option 3 from main menu"
                            echo "4. Deploy to staging: Select option 6 from main menu"
                            echo "5. Push to GitHub to trigger CI/CD"
                            echo ""
                            echo "💡 The function is now available in the interactive menu!"
                        else
                            echo "❌ Failed to create function. Please check the error messages above."
                        fi
                    fi
                fi
                ;;
            6) # Interactive Shell
                echo ""
                echo "🚀 Starting interactive shell with AWS credentials configured..."
                echo "💡 Available commands:"
                echo "   python3 scripts/deploy_with_aliases.py status"
                echo "   python3 scripts/local_test.py test <function>"
                echo "   python3 scripts/local_test.py test-unit <function>"
                echo "   python3 scripts/local_test.py list-events [function]"
                echo "   python3 scripts/add_lambda_function.py <function> <category>"
                echo "   aws lambda list-functions"
                echo "   aws sts get-caller-identity"
                echo ""
                echo "🔄 Type 'menu' to return to the interactive menu"
                echo "❌ Type 'exit' to leave the shell and return to menu"
                echo ""
                
                # Create a custom bash profile that includes the menu command
                export PS1="(lambda-deploy) $PS1"
                
                # Start interactive shell with custom environment
                bash --rcfile <(echo "
                    # Custom bash profile for Lambda deployment
                    alias menu='echo \"Returning to menu...\"; exit'
                    alias status='python3 scripts/deploy_with_aliases.py status'
                    alias ls-functions='python3 utils/function_discovery.py list'
                    alias test='python3 scripts/local_test.py test'
                    alias test-unit='python3 scripts/local_test.py test-unit'
                    alias list-events='python3 scripts/local_test.py list-events'
                    
                    echo '🔄 Type \"menu\" to return to the interactive menu'
                    echo '💡 Type \"help\" to see available aliases'
                    
                    function help() {
                        echo 'Available aliases:'
                        echo '  menu        - Return to interactive menu'
                        echo '  status      - Show deployment status'
                        echo '  list        - List all aliases'
                        echo '  test        - Test function locally'
                        echo '  test-unit   - Run unit tests'
                        echo '  list-events - List test events'
                    }
                ")
                ;;
            7) # Exit
                echo "👋 Goodbye!"
                exit 0
                ;;
            *)  # Invalid choice
                echo "❌ Invalid choice. Please select 1-7."
                ;;
        esac
        
        echo ""
        echo "Press Enter to continue..."
        read -r
    done
}

# Main script logic
case "$1" in
    "deploy")
        if [ $# -ne 2 ]; then
            echo "❌ Error: deploy command requires 1 argument (encrypted_credentials)"
            echo ""
            echo "Usage:"
            echo "  docker run --rm -it app deploy <encrypted_credentials>"
            echo ""
            echo "Example:"
            echo "  docker run --rm -it app deploy YOUR_BASE64_ENCODED_CREDENTIALS"
            exit 1
        fi
        
        ENCRYPTED_CREDS="$2"
        
        # Start interactive menu automatically
        handle_interactive_menu "$ENCRYPTED_CREDS"
        ;;
        
    "hash")
        if [ $# -ne 4 ]; then
            echo "❌ Error: hash command requires 3 arguments (access_key, secret_key, region)"
            show_usage
            exit 1
        fi
        
        ACCESS_KEY="$2"
        SECRET_KEY="$3"
        REGION="$4"
        
        echo "🔐 Creating encrypted credentials hash..."
        ENCRYPTED=$(python3 utils/encrypt_utils.py hash "$ACCESS_KEY" "$SECRET_KEY" "$REGION" | grep "Hash:" | cut -d' ' -f2)
        echo "✅ Encrypted credentials hash:"
        echo "$ENCRYPTED"
        echo ""
        echo "📋 Use this hash for deployment:"
        echo "docker run --rm -it app deploy $ENCRYPTED"
        ;;
        
    "setup-aliases")
        if [ $# -ne 2 ]; then
            echo "❌ Error: setup-aliases command requires 1 argument (encrypted_credentials)"
            show_usage
            exit 1
        fi
        
        ENCRYPTED_CREDS="$2"
        
        if ! setup_aws_credentials "$ENCRYPTED_CREDS"; then
            exit 1
        fi
        
        echo "🏷️  Setting up aliases for all functions..."
        python3 scripts/lambda_alias_manager.py setup
        
        echo ""
        echo "📊 Alias Status:"
        python3 scripts/lambda_alias_manager.py list
        ;;
        
    "promote")
        if [ $# -ne 5 ]; then
            echo "❌ Error: promote command requires 4 arguments (encrypted_credentials, function, source_env, target_env)"
            show_usage
            exit 1
        fi
        
        ENCRYPTED_CREDS="$2"
        FUNCTION="$3"
        SOURCE_ENV="$4"
        TARGET_ENV="$5"
        
        if ! setup_aws_credentials "$ENCRYPTED_CREDS"; then
            exit 1
        fi
        
        echo "🔄 Promoting $FUNCTION from $SOURCE_ENV to $TARGET_ENV..."
        python3 scripts/deploy_with_aliases.py promote "$FUNCTION" "$SOURCE_ENV" "$TARGET_ENV"
        
        echo ""
        echo "📊 Updated Status:"
        python3 scripts/deploy_with_aliases.py status
        ;;
        
    "status")
        if [ $# -ne 2 ]; then
            echo "❌ Error: status command requires 1 argument (encrypted_credentials)"
            show_usage
            exit 1
        fi
        
        ENCRYPTED_CREDS="$2"
        
        if ! setup_aws_credentials "$ENCRYPTED_CREDS"; then
            exit 1
        fi
        
        echo "📊 Deployment Status Report"
        echo "=" * 50
        python3 scripts/deploy_with_aliases.py status
        ;;
        
    "test-local")
        if [ $# -ne 2 ]; then
            echo "❌ Error: test-local command requires 1 argument (function)"
            show_usage
            exit 1
        fi
        
        FUNCTION="$2"
        
        echo "🧪 Testing function locally: $FUNCTION"
        python3 scripts/local_test.py test "$FUNCTION"
        ;;
        
    "test-unit")
        if [ $# -ne 2 ]; then
            echo "❌ Error: test-unit command requires 1 argument (function)"
            show_usage
            exit 1
        fi
        
        FUNCTION="$2"
        
        echo "🧪 Running unit tests for: $FUNCTION"
        python3 scripts/local_test.py test-unit "$FUNCTION"
        ;;
        
    "list-events")
        FUNCTION="${2:-}"
        
        if [ -n "$FUNCTION" ]; then
            echo "📋 Test events for $FUNCTION:"
            python3 scripts/local_test.py list-events "$FUNCTION"
        else
            echo "📋 All test events:"
            python3 scripts/local_test.py list-events
        fi
        ;;
        
    "shell")
        if [ $# -ne 2 ]; then
            echo "❌ Error: shell command requires 1 argument (encrypted_credentials)"
            show_usage
            exit 1
        fi
        
        ENCRYPTED_CREDS="$2"
        
        if ! setup_aws_credentials "$ENCRYPTED_CREDS"; then
            exit 1
        fi
        
        echo ""
        echo "🚀 Starting interactive shell with AWS credentials configured..."
        echo "💡 Available commands:"
        echo "   python3 scripts/deploy_with_aliases.py status"
        echo "   python3 scripts/lambda_alias_manager.py list"
        echo "   python3 scripts/local_test.py test <function>"
        echo "   python3 scripts/local_test.py test-unit <function>"
        echo "   python3 scripts/local_test.py list-events [function]"
        echo "   aws lambda list-functions"
        echo "   aws sts get-caller-identity"
        echo ""
        echo "Type 'exit' to leave the shell"
        echo ""
        
        # Start interactive shell
        exec /bin/bash
        ;;
        
    *)  # Default: show usage
        show_usage
        exit 1
        ;;
esac 