name: Lambda Deployment Pipeline

on:
  push:
    branches: [main]
    paths:
      # Only trigger on changes to code and configuration
      - "Lambdas/**"
      - "scripts/**"
      - "utils/**"
      - "cdk/**"
      - "config.py"
      - "app.py"
      - "requirements.txt"
      - ".github/workflows/**"
    # Exclude documentation and non-functional changes
    paths-ignore:
      - "**.md"
      - "**.txt"
      - ".gitignore"
      - "Dockerfile"
      - "entrypoint*.sh"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  AWS_REGION: us-east-1

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black pytest boto3 moto
          pip install -r requirements.txt

      - name: Code formatting check
        run: |
          black --check --diff .

      - name: Linting
        run: |
          # Critical errors - MUST pass
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Style checks - warn but don't fail
          flake8 . --count --max-complexity=10 --max-line-length=127 --statistics --exit-zero

      - name: Run unit tests
        run: |
          # Run tests for verifyCodeAndAuthHandler
          cd Lambdas/Authentication/verifyCodeAndAuthHandler
          if [ -d "tests" ] && [ "$(find tests -name "*.py" | wc -l)" -gt 0 ]; then
            echo "üß™ Running unit tests for verifyCodeAndAuthHandler..."
            python -m pytest tests/ -v
          else
            echo "‚ö†Ô∏è  No tests found for verifyCodeAndAuthHandler - this should be addressed"
          fi
          cd ../../..

          # Add more function tests here automatically when new functions are created

      - name: Local function tests
        run: |
          # Test each function locally - FAIL if tests fail
          echo "üß™ Running local function tests..."
          python scripts/local_test.py test verifyCodeAndAuthHandler

          # Add more local tests here automatically when new functions are created

  deploy-staging:
    name: Deploy to STAGING
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.ref == 'refs/heads/main'
    # No environment protection for automatic deployment

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install AWS CDK
        run: |
          npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to STAGING
        run: |
          # Deploy all functions to STAGING
          python scripts/deploy_with_aliases.py deploy-all STAGING

          echo "‚úÖ STAGING deployment complete"

      - name: Run integration tests
        run: |
          # Add integration tests here
          echo "‚úÖ Integration tests passed"

      - name: Post deployment status
        run: |
          python scripts/deploy_with_aliases.py status

  deploy-production:
    name: Deploy to PRODUCTION
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://console.aws.amazon.com/lambda

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install AWS CDK
        run: |
          npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to PRODUCTION
        run: |
          # Deploy all functions to PRODUCTION
          python scripts/deploy_with_aliases.py deploy-all PROD

          echo "üöÄ PRODUCTION deployment complete"

      - name: Post deployment status
        run: |
          python scripts/deploy_with_aliases.py status

  promote-staging-to-prod:
    name: Promote STAGING to PROD
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://console.aws.amazon.com/lambda

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Promote STAGING to PROD
        run: |
          # Get all functions dynamically and promote them
          while IFS= read -r func_name; do
            echo "üîÑ Promoting $func_name from STAGING to PROD..."
            python scripts/deploy_with_aliases.py promote "$func_name" STAGING PROD
          done < <(python utils/function_discovery.py list)

          echo "üöÄ Promotion to PRODUCTION complete"

      - name: Final deployment status
        run: |
          python scripts/deploy_with_aliases.py status
