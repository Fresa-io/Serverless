name: Pull Request Validation

on:
  pull_request:
    branches: [main]
    paths:
      # Only trigger for code and configuration changes
      - "Lambdas/**"
      - "scripts/**"
      - "utils/**"
      - "cdk/**"
      - "config.py"
      - "app.py"
      - "requirements.txt"
      - ".github/workflows/**"

env:
  AWS_REGION: us-east-1

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black pytest boto3 moto
          pip install -r requirements.txt

      - name: Code formatting check
        run: |
          echo "üé® Checking code formatting..."
          black --check --diff .

      - name: Linting
        run: |
          echo "üîç Running linting checks..."
          # Critical errors - MUST pass
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Style checks - warn but don't fail
          flake8 . --count --max-complexity=10 --max-line-length=127 --statistics --exit-zero

      - name: Security check
        run: |
          echo "üîí Checking for security issues..."
          # Check for hardcoded secrets (basic patterns, excluding legitimate utilities)
          FOUND_SECRETS=false

          # Look for AWS credentials with actual values (not just variable names)
          if grep -r "aws_access_key_id.*=.*[\"']AKIA" --include="*.py" --include="*.yml" --exclude-dir=".github" .; then
            echo "‚ùå Hardcoded AWS access keys found!"
            FOUND_SECRETS=true
          fi

          if grep -r "aws_secret_access_key.*=.*[\"']" --include="*.py" --include="*.yml" --exclude-dir=".github" . | grep -v "encrypt_utils.py" | grep -v "sys.argv"; then
            echo "‚ùå Hardcoded AWS secret keys found!"
            FOUND_SECRETS=true
          fi

          # Look for hardcoded passwords
          if grep -r "password.*=.*[\"']" --include="*.py" --include="*.yml" --exclude-dir=".github" . | grep -v "encrypt_utils.py" | grep -v "sys.argv" | grep -v "getpass"; then
            echo "‚ùå Hardcoded passwords found!"
            FOUND_SECRETS=true
          fi

          if [ "$FOUND_SECRETS" = true ]; then
            exit 1
          fi

          echo "‚úÖ No hardcoded secrets detected"

      - name: Run unit tests
        run: |
          echo "üß™ Running unit tests..."
          # Dynamically find and test all Lambda functions
          while IFS= read -r func_name; do
            echo "Testing $func_name..."
            func_path=$(find Lambdas -name "$func_name" -type d)
            if [ -d "$func_path/tests" ] && [ "$(find "$func_path/tests" -name "*.py" | wc -l)" -gt 0 ]; then
              echo "üß™ Running unit tests for $func_name..."
              cd "$func_path"
              python -m pytest tests/ -v
              cd - > /dev/null
            else
              echo "‚ö†Ô∏è  No tests found for $func_name"
            fi
          done < <(python utils/function_discovery.py list)

      - name: Local function tests
        run: |
          echo "üß™ Running local function tests..."
          # Test each function locally
          while IFS= read -r func_name; do
            echo "üîç Testing $func_name locally..."
            python scripts/local_test.py test "$func_name"
          done < <(python utils/function_discovery.py list)

      - name: Validate project structure
        run: |
          echo "üìÅ Validating project structure..."

          # Check required directories exist
          required_dirs=("Lambdas" "scripts" "utils" "cdk" ".github/workflows")
          for dir in "${required_dirs[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "‚ùå Required directory missing: $dir"
              exit 1
            fi
          done

          # Check required files exist
          required_files=("config.py" "app.py" "requirements.txt" "README.md")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Required file missing: $file"
              exit 1
            fi
          done

          echo "‚úÖ Project structure validated"

      - name: Check for conflicts with main
        run: |
          echo "üîÑ Checking for merge conflicts..."
          git fetch origin main
          if ! git merge-tree $(git merge-base HEAD origin/main) HEAD origin/main | grep -q "^<<<<<<< "; then
            echo "‚úÖ No merge conflicts detected"
          else
            echo "‚ùå Merge conflicts detected with main branch"
            exit 1
          fi

      - name: Dry-run deployment validation
        run: |
          echo "üß™ Validating deployment scripts (dry-run)..."
          # Test that deployment scripts can at least start without AWS credentials
          python scripts/deploy_with_aliases.py --help
          python scripts/lambda_alias_manager.py --help
          echo "‚úÖ Deployment scripts validated"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
