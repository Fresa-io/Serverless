#!/bin/bash

# Entrypoint script for CDK deployment with encrypted credentials

# Function to show usage
show_usage() {
    echo "üöÄ CDK Deployment Container"
    echo ""
    echo "Usage:"
    echo "  docker run --rm app hash <access_key> <secret_key> <region>"
    echo "  docker run --rm app deploy <encrypted_credentials>"
    echo "  docker run --rm -it app shell <encrypted_credentials>"
    echo ""
    echo "Examples:"
    echo "  # Hash credentials (first time setup)"
    echo "  docker run --rm app hash AKIATYDCXTUVLGSA6HMK OinVuEzoBzSxQzDrn9KvYytRpoLjzgObYPaA2KnC us-east-1"
    echo ""
    echo "  # Deploy with encrypted credentials"
    echo "  docker run --rm app deploy QUtJQVRZRENYVFVWTEZTQTZITUs6T2luVnVFem9CelpTeFF6RHJuOUt2WXl0UnBvTGp6Z09iWVBhQTJLbkM6dXMtZWFzdC0x"
    echo ""
    echo "  # Interactive shell with AWS credentials"
    echo "  docker run --rm -it app shell QUtJQVRZRENYVFVWTEZTQTZITUs6T2luVnVFem9CelN4UXpEcm45S3ZZeXRScG9ManpnT2JZUGFBMktuQzp1cy1lYXN0LTE="
    echo ""
    echo "üîê Security: Credentials are encrypted using base64 encoding for sharing"
}

# Main script logic
case "$1" in
    "hash")
        if [ $# -ne 4 ]; then
            echo "‚ùå Error: hash command requires 3 arguments (access_key, secret_key, region)"
            show_usage
            exit 1
        fi
        
        ACCESS_KEY="$2"
        SECRET_KEY="$3"
        REGION="$4"
        
        echo "üîê Creating encrypted credentials hash..."
        ENCRYPTED=$(python3 encrypt_utils.py hash "$ACCESS_KEY" "$SECRET_KEY" "$REGION" | grep "Hash:" | cut -d' ' -f2)
        echo "‚úÖ Encrypted credentials hash:"
        echo "$ENCRYPTED"
        echo ""
        echo "üìã Use this hash for deployment:"
        echo "docker run --rm app deploy $ENCRYPTED"
        ;;
        
    "deploy")
        if [ $# -ne 2 ]; then
            echo "‚ùå Error: deploy command requires 1 argument (encrypted_credentials)"
            show_usage
            exit 1
        fi
        
        ENCRYPTED_CREDS="$2"
        
        echo "üîì Decrypting credentials..."
        DECRYPTED_OUTPUT=$(python3 encrypt_utils.py decrypt "$ENCRYPTED_CREDS" 2>&1)
        
        if echo "$DECRYPTED_OUTPUT" | grep -q "Error:"; then
            echo "‚ùå $DECRYPTED_OUTPUT"
            echo ""
            echo "üí° Troubleshooting:"
            echo "1. Make sure you're using the exact hash generated by the 'hash' command"
            echo "2. Check that the hash hasn't been modified or truncated"
            echo "3. Try generating a new hash with: docker run --rm app hash <access_key> <secret_key> <region>"
            exit 1
        fi
        
        # Extract credentials from Python output
        ACCESS_KEY=$(echo "$DECRYPTED_OUTPUT" | grep "Access Key:" | cut -d' ' -f3)
        SECRET_KEY=$(echo "$DECRYPTED_OUTPUT" | grep "Secret Key:" | cut -d' ' -f3)
        REGION=$(echo "$DECRYPTED_OUTPUT" | grep "Region:" | cut -d' ' -f2)
        
        if [ -z "$ACCESS_KEY" ] || [ -z "$SECRET_KEY" ] || [ -z "$REGION" ]; then
            echo "‚ùå Error: Failed to extract credentials from decryption output"
            echo "Debug output: $DECRYPTED_OUTPUT"
            exit 1
        fi
        
        echo "‚úÖ Credentials decrypted successfully"
        echo "üåç Region: $REGION"
        
        # Configure AWS CLI
        echo "‚öôÔ∏è  Configuring AWS CLI..."
        aws configure set aws_access_key_id "$ACCESS_KEY"
        aws configure set aws_secret_access_key "$SECRET_KEY"
        aws configure set region "$REGION"
        aws configure set output json
        
        # Test AWS connection
        echo "üîç Testing AWS connection..."
        if aws sts get-caller-identity > /dev/null 2>&1; then
            echo "‚úÖ AWS connection successful"
            IDENTITY=$(aws sts get-caller-identity --query 'Arn' --output text)
            echo "üë§ Identity: $IDENTITY"
        else
            echo "‚ùå AWS connection failed. Please check your credentials."
            exit 1
        fi
        
        # List Lambda functions to verify permissions
        echo "üìã Checking existing Lambda functions..."
        aws lambda list-functions --query 'Functions[?contains(FunctionName, `tracer`)].FunctionName' --output table || echo "‚ö†Ô∏è  No tracer functions found or insufficient permissions"
        
        # Bootstrap CDK if needed
        echo "üöÄ Bootstrapping CDK..."
        echo "üìù Note: CDK bootstrap is only needed once per AWS account/region"
        echo "üîÑ If already bootstrapped, this will be skipped automatically"
        
        # Try to bootstrap, but don't fail if already bootstrapped
        if cdk bootstrap 2>&1 | grep -q "already bootstrapped\|already exists"; then
            echo "‚úÖ CDK already bootstrapped - skipping"
        elif cdk bootstrap; then
            echo "‚úÖ CDK bootstrap completed successfully"
        else
            echo "‚ö†Ô∏è  CDK bootstrap failed or already bootstrapped - continuing with deployment"
        fi
        
        # Deploy the stack
        echo "üöÄ Deploying CDK stack..."
        cdk deploy --require-approval never
        
        if [ $? -eq 0 ]; then
            echo "‚úÖ Deployment completed successfully!"
            echo ""
            echo "üìä Stack outputs:"
            cdk list
            echo ""
            echo "üöÄ Opening interactive shell for additional commands..."
            echo "üí° You can now run AWS CLI commands like:"
            echo "   aws lambda list-functions"
            echo "   aws s3 ls"
            echo "   aws sts get-caller-identity"
            echo "   cdk list"
            echo ""
            echo "Type 'exit' to leave the shell"
            echo ""
            
            # Start interactive shell
            exec /bin/bash
        else
            echo "‚ùå Deployment failed!"
            exit 1
        fi
        ;;
        
    "shell")
        if [ $# -ne 2 ]; then
            echo "‚ùå Error: shell command requires 1 argument (encrypted_credentials)"
            show_usage
            exit 1
        fi
        
        ENCRYPTED_CREDS="$2"
        
        echo "üîì Decrypting credentials..."
        DECRYPTED_OUTPUT=$(python3 encrypt_utils.py decrypt "$ENCRYPTED_CREDS" 2>&1)
        
        if echo "$DECRYPTED_OUTPUT" | grep -q "Error:"; then
            echo "‚ùå $DECRYPTED_OUTPUT"
            echo ""
            echo "üí° Troubleshooting:"
            echo "1. Make sure you're using the exact hash generated by the 'hash' command"
            echo "2. Check that the hash hasn't been modified or truncated"
            echo "3. Try generating a new hash with: docker run --rm app hash <access_key> <secret_key> <region>"
            exit 1
        fi
        
        # Extract credentials from Python output
        ACCESS_KEY=$(echo "$DECRYPTED_OUTPUT" | grep "Access Key:" | cut -d' ' -f3)
        SECRET_KEY=$(echo "$DECRYPTED_OUTPUT" | grep "Secret Key:" | cut -d' ' -f3)
        REGION=$(echo "$DECRYPTED_OUTPUT" | grep "Region:" | cut -d' ' -f2)
        
        if [ -z "$ACCESS_KEY" ] || [ -z "$SECRET_KEY" ] || [ -z "$REGION" ]; then
            echo "‚ùå Error: Failed to extract credentials from decryption output"
            echo "Debug output: $DECRYPTED_OUTPUT"
            exit 1
        fi
        
        echo "‚úÖ Credentials decrypted successfully"
        echo "üåç Region: $REGION"
        
        # Configure AWS CLI
        echo "‚öôÔ∏è  Configuring AWS CLI..."
        aws configure set aws_access_key_id "$ACCESS_KEY"
        aws configure set aws_secret_access_key "$SECRET_KEY"
        aws configure set region "$REGION"
        aws configure set output json
        
        # Test AWS connection
        echo "üîç Testing AWS connection..."
        if aws sts get-caller-identity > /dev/null 2>&1; then
            echo "‚úÖ AWS connection successful"
            IDENTITY=$(aws sts get-caller-identity --query 'Arn' --output text)
            echo "üë§ Identity: $IDENTITY"
        else
            echo "‚ùå AWS connection failed. Please check your credentials."
            exit 1
        fi
        
        echo ""
        echo "üöÄ Starting interactive shell with AWS credentials configured..."
        echo "üí° You can now run AWS CLI commands like:"
        echo "   aws lambda list-functions"
        echo "   aws s3 ls"
        echo "   aws sts get-caller-identity"
        echo "   cdk list"
        echo ""
        echo "Type 'exit' to leave the shell"
        echo ""
        
        # Start interactive shell
        exec /bin/bash
        ;;
        
    *)
        echo "‚ùå Unknown command: $1"
        show_usage
        exit 1
        ;;
esac 